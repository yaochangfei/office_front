{"remainingRequest":"/Users/yaochangfei/xjyt/xjyt-offical/front_end/official_front/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yaochangfei/xjyt/xjyt-offical/front_end/official_front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yaochangfei/xjyt/xjyt-offical/front_end/official_front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yaochangfei/xjyt/xjyt-offical/front_end/official_front/src/view/indexComponents/pc.vue?vue&type=template&id=76584bbb&scoped=true&","dependencies":[{"path":"/Users/yaochangfei/xjyt/xjyt-offical/front_end/official_front/src/view/indexComponents/pc.vue","mtime":1588209702336},{"path":"/Users/yaochangfei/xjyt/xjyt-offical/front_end/official_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yaochangfei/xjyt/xjyt-offical/front_end/official_front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yaochangfei/xjyt/xjyt-offical/front_end/official_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yaochangfei/xjyt/xjyt-offical/front_end/official_front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}