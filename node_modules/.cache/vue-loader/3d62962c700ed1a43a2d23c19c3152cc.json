{"remainingRequest":"/Users/yaochangfei/xjyt/office_front/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yaochangfei/xjyt/office_front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yaochangfei/xjyt/office_front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yaochangfei/xjyt/office_front/src/view/Contact.vue?vue&type=template&id=a9b59822&scoped=true&","dependencies":[{"path":"/Users/yaochangfei/xjyt/office_front/src/view/Contact.vue","mtime":1588216834865},{"path":"/Users/yaochangfei/xjyt/office_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yaochangfei/xjyt/office_front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yaochangfei/xjyt/office_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yaochangfei/xjyt/office_front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}